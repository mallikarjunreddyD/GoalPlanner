// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: newGoal_srv.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewGoalServiceClient is the client API for NewGoalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewGoalServiceClient interface {
	SetGoal(ctx context.Context, in *NewGoalRequest, opts ...grpc.CallOption) (*NewGoalResponse, error)
}

type newGoalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewGoalServiceClient(cc grpc.ClientConnInterface) NewGoalServiceClient {
	return &newGoalServiceClient{cc}
}

func (c *newGoalServiceClient) SetGoal(ctx context.Context, in *NewGoalRequest, opts ...grpc.CallOption) (*NewGoalResponse, error) {
	out := new(NewGoalResponse)
	err := c.cc.Invoke(ctx, "/pb.newGoalService/SetGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewGoalServiceServer is the server API for NewGoalService service.
// All implementations should embed UnimplementedNewGoalServiceServer
// for forward compatibility
type NewGoalServiceServer interface {
	SetGoal(context.Context, *NewGoalRequest) (*NewGoalResponse, error)
}

// UnimplementedNewGoalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNewGoalServiceServer struct {
}

func (UnimplementedNewGoalServiceServer) SetGoal(context.Context, *NewGoalRequest) (*NewGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGoal not implemented")
}

// UnsafeNewGoalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewGoalServiceServer will
// result in compilation errors.
type UnsafeNewGoalServiceServer interface {
	mustEmbedUnimplementedNewGoalServiceServer()
}

func RegisterNewGoalServiceServer(s grpc.ServiceRegistrar, srv NewGoalServiceServer) {
	s.RegisterService(&NewGoalService_ServiceDesc, srv)
}

func _NewGoalService_SetGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewGoalServiceServer).SetGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.newGoalService/SetGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewGoalServiceServer).SetGoal(ctx, req.(*NewGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewGoalService_ServiceDesc is the grpc.ServiceDesc for NewGoalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewGoalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.newGoalService",
	HandlerType: (*NewGoalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGoal",
			Handler:    _NewGoalService_SetGoal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newGoal_srv.proto",
}
